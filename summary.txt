1. I chose Python for this task, as Python's 'csv' and 'datetime' libraries make it very easy to read the transaction data and sort the transactions by date. Additionally, Python's robust list comprehension abilities make it very easy to sum all transactions by a single payer, while keeping my code clean and readable. Additionally, I simply have more experience with Python than I do with other languages, especially other languages that would also be suitable for this task.

2. There are quite a few advantages of my implementation. The code is modular and the spendPoints function is easy to understand and maintain. The function takes a list of command line arguments and returns a dictionary with the updated total points for each payer after the points are spent. This makes it easy to use the function in other programs or scripts.
Additionally, the code is rather flexible. The function can be used with any CSV file that has the same format as the transaction data provided. This makes it easy to use the function with different transaction data. Additionally, basic error handling is a plus. The function performs basic error handling by checking for invalid input values and printing an error message if any values are invalid. This helps to prevent runtime errors and improve the reliability of the code.

There are, however, some disadvantages, for example specific input formats. The function assumes that the input values are in a specific order and format. This makes it difficult to use the function with different input formats or to modify the order of the input values. This implementation also does not use the most efficient data structures. The function uses a list of dictionaries to store the transaction data and a dictionary to store the total points for each payer. This may be inefficient for large datasets or when the data needs to be sorted or filtered in complex ways. However, these data structures do improve the readability and succinctness of the code, which is a trade-off that I am willing to make, at least for this exemplary task.

Overall, the spendPoints function is a simple and easy-to-use solution for spending points on transactions. While it may have some limitations in terms of functionality and efficiency, it is a good starting point for further development and can be easily modified to suit different use cases.

3. A favorite personal project of mine this last semester was my creation of a web-scraper to collect nutritional data from Harvard's Undergraduate Dining Services website and automatically upload it to an accessible nutrtional info database. The vast majority of students here at Harvard (99+%) live in Harvard's on-campus residential houses, and eat all three meals a day at the dining halls. The dining halls are run by Harvard's Undergraduate Dining Services (HUDS), and they provide nutritional information for all of the food they serve on their website. However, this is only plain-text data, which makes it very tedious if someone wanted to track their nutritional intake. 

Many students at Harvard, like our athletes, like to track their intake to ensure they get enough protein, carbohydrates, etc., and they frequently use an app called MyFitnessPal to do so. MyFitnessPal allows users to manually enter their nutritional intake, but it also allows users to import nutritional data from other sources. I wanted to make it easier for students to track their nutritional intake, so I created a web-scraper to collect the nutritional data from HUDS's website and upload it automatically to MyFitnessPal. I implemented this project in Python, using Selenium to automate the web browser and the requests library to send the data to MyFitnessPal. However, one problem I ran into was the difficulty of scraping data from the dining hall website, as it isn't very well structured and the entries are not standardized very well. 

So, I got into contact with the head of the IT department at Harvard, and was granted access to the API that provides the dining hall website with the nutritional info itself. This allowed me to directly access the data, and I was able to create a much more efficient and reliable web-driver. Almost immediately, I was able to upload the nutritional data for all of the food served at Harvard's dining halls to MyFitnessPal. This was a very rewarding project, and I was able to help many of my friends and classmates track their nutritional intake more easily. I also learned a lot about web-scraping and web-development, and I was able to apply my knowledge of Python to a real-world problem.

Additionally, there have been a few times when I've met someone knew, and they've recognized my name from my account name on MyFitnessPal, which all of the nutritional info has been uploaded under. That isn't particularly pertinent, but it's been neat to see that this project has made a small impact on the lives of other students here. 